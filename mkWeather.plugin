
from base_plugin import BasePlugin, HookResult, HookStrategy
from ui.settings import Header, Divider, Selector, Text, Input
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from android_utils import run_on_ui_thread, log
from client_utils import get_last_fragment, run_on_queue, send_message, get_messages_controller
from org.telegram.messenger import AndroidUtilities
from android.content import Intent
from android.net import Uri

import json
import traceback
import urllib.request
from urllib.parse import quote
from urllib.error import HTTPError
from typing import Optional

# --- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω–∞ ---
__name__ = "MKWeather"
__description__ = "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ö–æ–º–∞–Ω–¥–∞ `.–ø–æ–≥–æ–¥–∞` –±–µ–∑ –≥–æ—Ä–æ–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP (GeoIP)."
__icon__ = "weather"
__version__ = "0.1.0"
__id__ = "MKweather_plugin"
__author__ = "@ffs_tmp_info"
__min_version__ = "0.6.9"


# --- –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è ---
class LocalizationManager:
    def __init__(self):
        self.language = "en"

    def set_language(self, lang_code: str):
        self.language = lang_code

    def get_string(self, string_key, **kwargs):
        string = self.strings.get(self.language, self.strings["en"]).get(string_key, string_key)
        if kwargs: return string.format(**kwargs)
        return string

    strings = {"ru": {"SETTINGS_HEADER": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≥–æ–¥—ã", "UNITS": "–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è", "UNIT_CELSIUS": "–¶–µ–ª—å—Å–∏–π",
                      "UNIT_FAHRENHEIT": "–§–∞—Ä–µ–Ω–≥–µ–π—Ç", "LANGUAGE": "–Ø–∑—ã–∫", "LANG_EN": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "LANG_RU": "–†—É—Å—Å–∫–∏–π",
                      "API_KEY_HEADER": "API –ö–ª—é—á OpenWeatherMap", "API_KEY_INPUT_LABEL": "API –ö–ª—é—á",
                      "API_KEY_INFO": "–î–ª—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ –Ω—É–∂–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –∫–ª—é—á. –ü–æ–ª—É—á–∏—Ç–µ –µ–≥–æ –Ω–∞ openweathermap.org –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π .weatherkey <–∫–ª—é—á>",
                      "API_KEY_SET": "‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "API_KEY_EMPTY": "‚ùå –ö–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                      "FETCHING_WEATHER": "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã...",
                      "FETCHING_GEOLOCATION": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...",
                      "ERR_GEOIP_FAILED": "ü§∑‚Äç‚ôÇÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ IP.",
                      "ERR_NO_CITY": "üòï –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ù–∞–ø—Ä–∏–º–µ—Ä: .weather –ú–æ—Å–∫–≤–∞",
                      "ERR_NOT_FOUND": "ü§∑‚Äç‚ôÇÔ∏è –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                      "ERR_NO_API_KEY": "üîë API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.",
                      "ERR_API_INVALID": "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ.",
                      "ERR_API_GENERIC": "üì° –û—à–∏–±–∫–∞ API: {code} {reason}", "ERR_UNKNOWN": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {error}",
                      "MSG_WEATHER_IN": "–ü–æ–≥–æ–¥–∞ –≤", "MSG_TEMP": "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "MSG_FEELS": "–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫",
                      "MSG_HUMIDITY": "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "MSG_WIND": "–í–µ—Ç–µ—Ä", "m/s": "–º/—Å", "mph": "–º–∏–ª—å/—á",
                      "DONATE_HEADER": "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", "DONATE_TEXT": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π", "GITHUB": "GitHub –∞–≤—Ç–æ—Ä–∞",
                      "COPIED_TO_CLIPBOARD": "–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"},
               "en": {"SETTINGS_HEADER": "Weather Settings", "UNITS": "Units", "UNIT_CELSIUS": "Celsius",
                      "UNIT_FAHRENHEIT": "Fahrenheit", "LANGUAGE": "Language", "LANG_EN": "English",
                      "LANG_RU": "Russian", "API_KEY_HEADER": "OpenWeatherMap API Key",
                      "API_KEY_INPUT_LABEL": "API Key",
                      "API_KEY_INFO": "The plugin requires a free API key. Get it at openweathermap.org and set it here or with the command .weatherkey <key>",
                      "API_KEY_SET": "‚úÖ API key saved successfully!", "API_KEY_EMPTY": "‚ùå The key cannot be empty.",
                      "FETCHING_WEATHER": "Fetching Weather...", "FETCHING_GEOLOCATION": "Determining location...",
                      "ERR_GEOIP_FAILED": "ü§∑‚Äç‚ôÇÔ∏è Could not determine city by IP.",
                      "ERR_NO_CITY": "üòï Please specify a city. For example: .weather London",
                      "ERR_NOT_FOUND": "ü§∑‚Äç‚ôÇÔ∏è City '{city}' not found.",
                      "ERR_NO_API_KEY": "üîë API key is not set. See plugin settings for details.",
                      "ERR_API_INVALID": "üö´ Invalid or inactive API key. Please check it.",
                      "ERR_API_GENERIC": "üì° API Error: {code} {reason}", "ERR_UNKNOWN": "Unknown error: {error}",
                      "MSG_WEATHER_IN": "Weather in", "MSG_TEMP": "Temperature", "MSG_FEELS": "feels like",
                      "MSG_HUMIDITY": "Humidity", "MSG_WIND": "Wind", "m/s": "m/s", "mph": "mph",
                      "DONATE_HEADER": "Support the Author", "DONATE_TEXT": "With Cryptocurrency",
                      "GITHUB": "Author's GitHub", "COPIED_TO_CLIPBOARD": "Link copied to clipboard"}}


locali = LocalizationManager()


class WeatherPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.api_base_url = "https://api.openweathermap.org/data/2.5/weather"
        self.geoip_url = "http://ip-api.com/json"
        self.progress_dialog: Optional[AlertDialogBuilder] = None
        self._update_localizer()

    def _update_localizer(self):
        lang_setting = self.get_setting("language", 0)
        locali.set_language("ru" if lang_setting == 1 else "en")

    def _copy_to_clipboard(self, text_to_copy: str):
        if AndroidUtilities.addToClipboard(text_to_copy):
            BulletinHelper.show_info(locali.get_string("COPIED_TO_CLIPBOARD"))

    def _open_url(self, url: str):
        def task():
            try:
                fragment = get_last_fragment()
                if fragment and fragment.getParentActivity():
                    activity = fragment.getParentActivity()
                    uri = Uri.parse(url)
                    intent = Intent(Intent.ACTION_VIEW, uri)
                    activity.startActivity(intent)
                else:
                    log("WeatherPlugin: Could not open URL, no activity found.")
            except Exception as e:
                log(f"WeatherPlugin: Failed to open URL {url}. Error: {e}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ UI –ø–æ—Ç–æ–∫–µ
        run_on_ui_thread(task)

    def on_plugin_load(self):
        self.add_on_send_message_hook(priority=100)
        self._update_localizer()

    def create_settings(self):
        self._update_localizer()
        return [
            Header(text=locali.get_string("SETTINGS_HEADER")),
            Selector(key="units", text=locali.get_string("UNITS"),
                     items=[locali.get_string("UNIT_CELSIUS"), locali.get_string("UNIT_FAHRENHEIT")], default=0,
                     icon="msg_temperature"),
            Selector(key="language", text=locali.get_string("LANGUAGE"),
                     items=[locali.get_string("LANG_EN"), locali.get_string("LANG_RU")], default=0, icon="msg_language",
                     on_change=lambda val: self._on_language_change(val)),
            Divider(),
            Header(text=locali.get_string("API_KEY_HEADER")),
            Input(key="api_key", text=locali.get_string("API_KEY_INPUT_LABEL"), default=self.get_setting("api_key", ""),
                  icon="msg_pin_code"),
            Divider(text=locali.get_string("API_KEY_INFO")),
            Header(text=locali.get_string("DONATE_HEADER")),
            Text(text=locali.get_string("DONATE_TEXT"), icon="menu_cashtag", accent=True,
                 on_click=lambda v: self._copy_to_clipboard("http://t.me/send?start=IV5BntjEdiMW")),
            # –°—Å—ã–ª–∫–∞ –Ω–∞ GitHub —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
            Text(text=locali.get_string("GITHUB"), icon="msg_info", accent=True,
                 on_click=lambda v: self._open_url("https://github.com/MKultra6969"))
        ]

    def _on_language_change(self, value):
        self._update_localizer()
        self.reload_settings_ui()

    def on_send_message_hook(self, account, params):
        text = params.message
        if not text:
            return HookResult()

        text_lower = text.strip().lower()
        self._update_localizer()

        if text_lower.startswith(".weatherkey "):
            key = text[len(".weatherkey "):].strip()
            if key:
                self.set_setting("api_key", key)
                BulletinHelper.show_info(locali.get_string("API_KEY_SET"))
            else:
                BulletinHelper.show_error(locali.get_string("API_KEY_EMPTY"))
            return HookResult(strategy=HookStrategy.CANCEL)

        if text_lower.startswith(".weather") or text_lower.startswith(".–ø–æ–≥–æ–¥–∞"):
            parts = text.strip().split(" ", 1)
            city = parts[1].strip() if len(parts) > 1 else None
            loading_message = locali.get_string("FETCHING_GEOLOCATION") if not city else locali.get_string(
                "FETCHING_WEATHER")
            run_on_ui_thread(lambda: self._show_loading_dialog(loading_message))
            run_on_queue(lambda: self._fetch_weather(params.peer, city=city))
            return HookResult(strategy=HookStrategy.CANCEL)

        return HookResult()

    def _show_loading_dialog(self, title: str):
        fragment = get_last_fragment()
        if not fragment or not fragment.getParentActivity():
            log("WeatherPlugin: Cannot get activity to show dialog.")
            return

        self.progress_dialog = AlertDialogBuilder(fragment.getParentActivity(), AlertDialogBuilder.ALERT_TYPE_SPINNER)
        self.progress_dialog.set_title(title)
        self.progress_dialog.set_cancelable(False)
        self.progress_dialog.show()

    def _dismiss_loading_dialog(self):
        if self.progress_dialog:
            self.progress_dialog.dismiss()
            self.progress_dialog = None

    def _fetch_city_by_ip(self) -> Optional[str]:
        try:
            with urllib.request.urlopen(self.geoip_url, timeout=5) as response:
                data = json.loads(response.read().decode('utf-8'))
                if data.get("status") == "success" and data.get("city"):
                    return data.get("city")
                log(f"GeoIP API error: {data.get('message')}")
                return None
        except Exception:
            log(f"GeoIP request failed: {traceback.format_exc()}")
            return None

    def _fetch_weather(self, peer_id: int, city: Optional[str] = None):
        try:
            if not city:
                city = self._fetch_city_by_ip()
                if not city:
                    self._show_error_bulletin(locali.get_string("ERR_GEOIP_FAILED"))
                    return

            api_key = self.get_setting("api_key")
            if not api_key:
                self._show_error_bulletin(locali.get_string("ERR_NO_API_KEY"))
                return

            units_setting = self.get_setting("units", 0)
            unit_param = "metric" if units_setting == 0 else "imperial"
            lang_param = locali.language
            url = f"{self.api_base_url}?q={quote(city)}&appid={api_key}&units={unit_param}&lang={lang_param}"

            with urllib.request.urlopen(url, timeout=10) as response:
                data = json.loads(response.read().decode('utf-8'))
                message = self._format_weather_message(data, units_setting)
                self._send_response(message, peer_id)

        except HTTPError as e:
            if e.code == 404:
                self._show_error_bulletin(locali.get_string("ERR_NOT_FOUND", city=city))
            elif e.code == 401:
                self._show_error_bulletin(locali.get_string("ERR_API_INVALID"))
            else:
                self._show_error_bulletin(locali.get_string("ERR_API_GENERIC", code=e.code, reason=e.reason))
        except Exception:
            log(f"Weather Plugin Error: {traceback.format_exc()}")
            self._show_error_bulletin(locali.get_string("ERR_API_INVALID"))

    def _send_response(self, text, peer_id):
        def task():
            self._dismiss_loading_dialog()
            send_message({"peer": peer_id, "message": text})

        run_on_ui_thread(task)

    def _show_error_bulletin(self, text: str):
        def task():
            self._dismiss_loading_dialog()
            BulletinHelper.show_error(text)

        run_on_ui_thread(task)

    def _format_weather_message(self, data, units_setting):
        unit_symbol = "¬∞C" if units_setting == 0 else "¬∞F";
        wind_unit = locali.get_string("m/s") if units_setting == 0 else locali.get_string("mph");
        city_name = data.get('name', 'N/A');
        country = data.get('sys', {}).get('country', '');
        description = data.get('weather', [{}])[0].get('description', 'N/A').capitalize();
        temp = data.get('main', {}).get('temp', 'N/A');
        feels_like = data.get('main', {}).get('feels_like', 'N/A');
        humidity = data.get('main', {}).get('humidity', 'N/A');
        wind_speed = data.get('wind', {}).get('speed', 'N/A');
        wind_deg = data.get('wind', {}).get('deg');
        wind_dir = self._get_wind_direction(wind_deg);
        icon = self._get_weather_icon(data.get('weather', [{}])[0].get('id'));
        msg = f"{icon} {locali.get_string('MSG_WEATHER_IN')} {city_name}, {country}:\n‚Ä¢ {description}\n‚Ä¢ {locali.get_string('MSG_TEMP')}: {temp}{unit_symbol} ({locali.get_string('MSG_FEELS')}: {feels_like}{unit_symbol})\n‚Ä¢ {locali.get_string('MSG_HUMIDITY')}: {humidity}%\n‚Ä¢ {locali.get_string('MSG_WIND')}: {wind_speed} {wind_unit} ({wind_dir})";
        return msg

    def _get_wind_direction(self, deg):
        if deg is None: return ""
        dirs = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW"];
        ix = round(deg / (360. / len(dirs)));
        return dirs[ix % len(dirs)]

    def _get_weather_icon(self, code):
        if not isinstance(code, int): return "‚ùì";
        if 200 <= code <= 232: return "‚õàÔ∏è";
        if 300 <= code <= 321: return "üåßÔ∏è";
        if 500 <= code <= 531: return "üåßÔ∏è";
        if 600 <= code <= 622: return "‚ùÑÔ∏è";
        if 701 <= code <= 781: return "üå´Ô∏è";
        if code == 800: return "‚òÄÔ∏è";
        if code == 801: return "üå§Ô∏è";
        if code == 802: return "‚õÖ";
        if code == 803: return "üå•Ô∏è";
        if code == 804: return "‚òÅÔ∏è";
        return "‚ùì"

# —Å–∞–Ω—å —Å–æ—Å–∏
